name: Test Release

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: true
      kernels_to_build:
        description: |
          Comma-separated list of kernels to build/release, e.g.:
          a12-5.10,a13-5.10,a13-5.15,a14-5.15,a14-6.1,a15-6.6
          or "all" to build every kernel.
        required: true
        type: string
        default: 'all'
      kernelsu_variant:
        description: "Select KernelSU"
        required: true
        type: choice
        options:
        - Official
        - Next
        - MKSU
        - SukiSU
        default: SukiSU
      kernelsu_branch:
        description: "Select KSU branch"
        required: true
        type: choice
        options:
        - Stable(标准)
        - Dev(开发)
        - Other(其他/指定)
        default: Dev(开发)
      version:
        description: 'Custom version name (e.g., characters after 5.10.198 / leave blank to use default version number)'
        required: false
        type: string
      use_zram:
        description: 'Enable more ZRAM algorithms?'
        required: true
        type: boolean
        default: true
      use_kpm:
        description: 'Enable KPM functionality?'
        required: true
        type: boolean
        default: true
      get_manager:
        description: 'Get the latest KSU Manager at the same time?'
        required: true
        type: boolean
        default: false

jobs:
  get_manager:
    if: ${{ inputs.get_manager }}
    uses: ./.github/workflows/get-manager.yml
    secrets: inherit
    with:
      kernelsu_variant: ${{ inputs.kernelsu_variant }}

  build-kernel-a12-5-10:
    if: contains(github.event.inputs.kernels_to_build, 'all') || contains(github.event.inputs.kernels_to_build, 'a12') || contains(github.event极客江湖
      - build-kernel-a14-6-1
      - build-kernel-a15-6-6
    if: always()
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    env:
      SHOULD_RUN_A12_5_10: ${{ contains(github.event.inputs.kernels_to_build, 'all') || contains(github.event.inputs.kernels_to_build, 'a12') || contains(github.event.inputs.kernels_to_build, 'a12-5.10') }}
      SHOULD_RUN_A13_5_10: ${{ contains(github.event.inputs.kernels_to_build, 'all') || contains(github.event.inputs.kernels_to_build, 'a13-5.10') || contains(github.event.inputs.kernels_to_build, 'a13') }}
      SHOULD_RUN_A13_5_15: ${{ contains(github.event.inputs.kernels_to_build, 'all') || contains(github.event.inputs.kernels_to_build, 'a13') || contains(github.event.inputs.kernels_to_build, 'a13-5.15') }}
      SHOULD_RUN_A14_5_15: ${{ contains(github.event.inputs.kernels_to_build, 'all') || contains(github.event.inputs.kernels_to_build, 'a14-5.15') || contains(github.event.inputs.kernels_to_build, 'a14') }}
      SHOULD极客江湖
  trigger-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    needs:
      - check-build-status
      - get_manager
    if: always()
    env:
      REPO_OWNER: Kavi
      REPO_NAME: GKI_KernelSU_SUSFS
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "GKI Kernel: ${{ inputs.kernelsu_variant == 'Next' && 'KernelSU-' || '' }} ${{ inputs.kernelsu_variant }}"
      INITIAL_RELEASE_NOTES: |
        This release includes **${{ inputs.kernelsu_variant == 'Next' && 'KernelSU' || '' }}${{ inputs.kernelsu_variant }}, please note the KSU version here**, SUSFS v1.5.8, LZ4KD
        Features:
        -> ${{ inputs.kernelsu_variant == 'Next' && 'KernelSU-' || '' }}${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}
        -> SUSFS ඞ v1.5.8
        -> Manual Syscall Hooks for better hiding
        -> Magic Mount Support
        -> Simple hiding for LineageOS detection
        -> Futile hiding for jit-zygote-cache detection
        -> Wireguard Support
        -> BBR Support
        ${{ inputs.use_kpm && '-> KPM Support' || '' }}
        -> **LZ4KD&ONEPLUS_LZ4K** ${{ inputs.use_zram && 'supported' || 'not supported' }}
        
        <details>
        <summary>Notes:</summary>
        - -> In SUS SU Mode 2, it will show as disabled or incompatible, the reason is that non-kprobe hooks were used (when compiling the kernel), and non-kprobe hooks are no longer needed!
        - -> In the latest version of susfs, flashing AK3 compressed package with Kernel Flasher will brick your device, try https://github.com/libxzr/HorizonKernelFlasher!
        </details>
        
        Modules:
        -> https://github.com/sidex15/ksu_module_susfs
    steps:
      - name: Conditional Release Check
        id: release_check
        if: ${{ inputs.make_release && needs.check-build-status.outputs.should_release == 'true' }}
        run: echo "Release conditions met. Proceeding with release."
        
      - name: Checkout code
        if: ${{ steps.release_check.outcome == 'success' }}
        uses: actions/checkout@v3
        
      - name: Fetch KSU and SUSFS Commit Info
        id: build_notes
        if: ${{ steps.release_check.outcome == 'success' }}
        run: |
          KSU_BRANCH=""
          if [[ "${{ inputs.kernelsu_branch }}" == "Dev(开发)" || "${{ inputs.kernelsu_variant }}" == "MKSU" || "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            if [[ "${{ inputs.kernelsu_variant }}" == "Official" || "${{ inputs.kernelsu_variant }}" == "MKSU" || "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
              KSU_BRANCH="main"
            elif [[ "${{ inputs.kernelsu_variant }}" == "Next" ]]; then
              KSU_BRANCH="next"
            fi
          fi
          
          echo "KSU_BRANCH=$KSU_BRANCH" >> $GITHUB_ENV
          
          KSU_REPO_URL=""
          KSU_REPO_URL2=""
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            KSU_REPO_URL="https://github.com/tiann/KernelSU.git"
            KSU_REPO_URL2="tiann/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            KSU_REPO_URL="https://github.com/KernelSU-Next/KernelSU-Next.git"
            KSU_REPO_URL2="KernelSU-Next/KernelSU-Next"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            KSU_REPO_URL="https://github.com/5ec1cff/KernelSU.git"
            KSU_REPO_URL2="5ec1cff/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            KSU_REPO_URL="https://github.com/ShirkNeko/KernelSU.git"
            KSU_REPO_URL2="ShirkNeko/KernelSU"
          else
            echo "Warning: Unknown KernelSU variant selected. Defaulting to Official for URL generation."
            KSU_REPO_URL="https://github.com/tiann/KernelSU.git"
            KSU_REPO_URL2="tiann/KernelSU"
          fi
          
          KSU_REF=""
          KSU_URL=""
          if [[ "${{ inputs.kernelsu_branch }}" == "Stable(标准)" && "${{ inputs.kernelsu_variant }}" != "MKSU" ]]; then
            TAG=$(git ls-remote --tags --sort=-v:refname "$K极客江湖
      - name: Install GitHub CLI
        if: ${{ steps.release_check.outcome == 'success' }}
        run: |
          sudo apt update
          sudo apt install -y curl
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null
          sudo apt update
          sudo apt install -y gh
          
      - name: Generate New Tag
        if: ${{ steps.release_check.outcome == 'success' }}
        run: |
          set -e
          
          # Configure Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          BASE_VERSION="v1.5.8"
          
          # Get existing tags
          EXISTING_TAGS=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[].name' 2>/dev/null || echo "")
          
          # Find highest revision
          MAX_REVISION=0
          while IFS= read -r tag; do
            if [[ "$tag" =~ ^${BASE_VERSION}-r([0-9]+)$ ]]; then
              REV="${BASH_REMATCH[1]}"
              if (( REV > MAX_REVISION )); then
                MAX_REVISION=$REV
              fi
            fi
          done <<< "$EXISTING_TAGS"
          
          NEW_REVISION=$((MAX_REVISION + 1))
          NEW_TAG="${BASE_VERSION}-r${NEW_REVISION}"
          
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          
      - name: Create and Push Tag
        if: ${{ steps.release_check.outcome == 'success' }}
        run: |
          # Create tag if doesn't exist locally
          if ! git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            git tag "$NEW_TAG"
          fi
          
          # Push tag if doesn't exist remotely
          if ! git ls-remote --exit-code origin "refs/tags/$NEW_TAG" >/dev/null 2>&1; then
            git push origin "$NEW_TAG"
          else
            echo "Tag $NEW_TAG already exists on remote"
          fi
          
      - name: Download Artifacts
        if: ${{ steps.release_check.outcome == 'success' }}
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts
          
      - name: Prepare Artifacts
        if: ${{ steps.release_check.outcome == 'success' }}
        run: |
          mkdir -p release-assets
          find ./downloaded-artifacts -type f -exec cp {} ./release-assets \;
          echo "Artifacts to upload:"
          ls -lh ./release-assets
          
      - name: Set Final Release Name
        if: ${{ steps.release_check.outcome == 'success' }}
        run: |
          # Your version suffix logic here
          echo "RELEASE_NAME=${{ env.RELEASE_NAME }} & SUSFS v1.5.8" >> $GITHUB_ENV
          
      - name: Create or Update Release
        if: ${{ steps.release_check.outcome == 'success' }}
        run: |
          if gh release view "$NEW_TAG" >/dev/null 2>&1; then
            echo "Updating existing release"
            gh release edit "$NEW_TAG" \
              --title "$RELEASE_NAME" \
              --notes "$FULL_RELEASE_NOTES" \
              --prerelease
          else
            echo "Creating new release"
            gh release create "$NEW_TAG" \
              --title "$RELEASE_NAME" \
              --notes "$FULL_RELEASE_NOTES" \
              --prerelease
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Artifacts
        if: ${{ steps.release_check.outcome极客江湖
