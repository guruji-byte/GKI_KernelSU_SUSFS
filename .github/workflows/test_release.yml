name: 测试发布

permissions:
  contents: write
  actions: write
  
on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: true
      kernelsu_variant:
        description: "选择 KernelSU"
        required: true
        type: choice
        options:
          - Official
          - Next
          - MKSU
          - SukiSU
        default: SukiSU
      kernelsu_branch:
        description: "选择 ksu 分支"
        required: true
        type: choice
        options:
          - Stable(标准)
          - Dev(开发)
          - Other(其他/指定)
        default: Dev(开发)
      version:
        description: '自定义版本名(如5.10.198后面的字符/留空则使用默认版本号)'
        required: false
        type: string
      use_zram:
        description: '是否开启增加更多ZRAM算法?'
        required: true
        type: boolean
        default: true
      use_kpm:
        description: '是否开启KPM功能?'
        required: true
        type: boolean
        default: true
      get_manager:
        description: '是否同时获取最新KSU管理器?'
        required: true
        type: boolean
        default: false
jobs:
#  get_manager:
#    uses: ./.github/workflows/get-manager.yml
#    secrets: inherit
#    with:
#      kernelsu_variant: ${{ inputs.kernelsu_variant }}

#  build-kernel-a12-5-10:
#    uses: ./.github/workflows/kernel-a12-5.10.yml
#    secrets: inherit
#    with:
#      make_release: true
#      kernelsu_variant: ${{ inputs.kernelsu_variant }}
#      kernelsu_branch: ${{ inputs.kernelsu_branch }}
#      version: ${{ inputs.version }}
#      use_zram: ${{ inputs.use_zram }}
#      use_kpm: ${{ inputs.use_kpm }}

#  build-kernel-a13-5-10:
#    uses: ./.github/workflows/kernel-a13-5.10.yml
#    secrets: inherit
#    with:
#      make_release: ${{ inputs.make_release }}
#      kernelsu_variant: ${{ inputs.kernelsu_variant }}
#      kernelsu_branch: ${{ inputs.kernelsu_branch }}
#      version: ${{ inputs.version }}
#      use_zram: ${{ inputs.use_zram }}
#      use_kpm: ${{ inputs.use_kpm }}

#  build-kernel-a13-5-15:
#    uses: ./.github/workflows/kernel-a13-5.15.yml
#    secrets: inherit
#    with:
#      make_release: ${{ inputs.make_release }}
#      kernelsu_variant: ${{ inputs.kernelsu_variant }}
#      kernelsu_branch: ${{ inputs.kernelsu_branch }}
#      version: ${{ inputs.version }}
#      use_zram: ${{ inputs.use_zram }}
#      use_kpm: ${{ inputs.use_kpm }}

#  build-kernel-a14-5-15:
#    uses: ./.github/workflows/kernel-a14-5.15.yml
#    secrets: inherit
#    with:
#      make_release: ${{ inputs.make_release }}
#      kernelsu_variant: ${{ inputs.kernelsu_variant }}
#      kernelsu_branch: ${{ inputs.kernelsu_branch }}
#      version: ${{ inputs.version }}
#      use_zram: ${{ inputs.use_zram }}
#      use_kpm: ${{ inputs.use_kpm }}

  build-kernel-a14-6-1:
    uses: ./.github/workflows/kernel-a14-6.1.yml
    secrets: inherit
    with:
      make_release: ${{ inputs.make_release }}
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      version: ${{ inputs.version }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}

#  build-kernel-a15-6-6:
#    uses: ./.github/workflows/kernel-a15-6.6.yml
#    secrets: inherit
#    with:
#      make_release: ${{ inputs.make_release }}
#      kernelsu_variant: ${{ inputs.kernelsu_variant }}
#      kernelsu_branch: ${{ inputs.kernelsu_branch }}
#      version: ${{ inputs.version }}
#      use_zram: ${{ inputs.use_zram }}
#      use_kpm: ${{ inputs.use_kpm }}

  trigger-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    needs:
        #- get_manager
        #- build-kernel-a12-5-10
        #- build-kernel-a13-5-10
        #- build-kernel-a13-5-15
        #- build-kernel-a14-5-15
        - build-kernel-a14-6-1
        #- build-kernel-a15-6-6
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: guruji-byte
      REPO_NAME: GKI_KernelSU_SUSFS
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      RELEASE_NAME: "GKI内核: ${{ inputs.kernelsu_variant == 'Next' && 'KernelSU-' || '' }} ${{ inputs.kernelsu_variant }}"

      RELEASE_NOTES: |
        此发布包含 **${{ inputs.kernelsu_variant == 'Next' && 'KernelSU' || '' }}${{ inputs.kernelsu_variant }},请注意此处的KSU版本** 、SUSFS v1.5.7 、 LZ4KD

        功能:
        -> ${{ inputs.kernelsu_variant == 'Next' && 'KernelSU-' || '' }}${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}
        -> SUSFS ඞ v1.5.7
        -> 手动Syscall Hooks,实现更好的隐藏效果
        -> Magic Mount 支持
        -> 简单隐藏 LineageOS 检测
        -> 徒劳隐藏 jit-zygote-cache 检测
        -> Wireguard 支持
        -> BBR 支持
        ${{ inputs.use_kpm && '-> KPM 支持' || '' }}
        -> **LZ4KD&ONEPLUS_LZ4K**  ${{ inputs.use_zram && '支持' || '不支持' }}
        
        <details>
        
        <summary>备注:</summary>
        - -> 在SUS SU 模式 2 下, 将显示为禁用或不兼容, 原因是(编译内核时)使用了非kprobe钩子 ,并且不再需要(非kprobe钩子)!
        - -> 在最新版的susfs, 使用Kernel Flasher刷入AK3压缩包会变砖, 尝试 https://github.com/libxzr/HorizonKernelFlasher!

        </details>

        模块: 
        -> https://github.com/sidex15/ksu_module_susfs
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 确定分支为 KernelSU-${{ inputs.kernelsu_variant }}
        if: ${{ inputs.kernelsu_branch == 'Dev(开发)' || inputs.kernelsu_variant == 'MKSU' || inputs.kernelsu_variant == 'SukiSU'  }}
        run: |
          if [[ "${{ inputs.kernelsu_variant }}" == "Official" || "${{ inputs.kernelsu_variant }}" == "MKSU" ]]; then
            BRANCH="main"
          elif [[ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            BRANCH="main"
          elif [[ "${{ inputs.kernelsu_variant }}" == "Next" ]]; then
            BRANCH="next"
          else
            echo "Error: Custom branch not provided for 'Other(其他/指定)'" >&2
            exit 1
          fi
          echo "KSU_BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: 获取提交哈希值或标签并生成 URL
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            REPO_URL="https://github.com/tiann/KernelSU.git"
            REPO_URL2="tiann/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            REPO_URL="https://github.com/KernelSU-Next/KernelSU-Next.git"
            REPO_URL2="KernelSU-Next/KernelSU-Next"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            REPO_URL="https://github.com/5ec1cff/KernelSU.git"
            REPO_URL2="5ec1cff/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            REPO_URL="https://github.com/ShirkNeko/KernelSU.git"
            REPO_URL2="ShirkNeko/KernelSU"
          else
            echo "Unknown variant"
            exit 1
          fi
          
          if [[ "${{ inputs.kernelsu_branch }}" == "Stable(标准)" && "${{ inputs.kernelsu_variant }}" != "MKSU" ]]; then
            TAG=$(git ls-remote --tags --sort=-v:refname $REPO_URL | grep -o 'refs/tags/.*' | cut -d'/' -f3 | head -n1)
            [[ -z "$TAG" ]] && { echo "Error: Could not fetch latest tag" >&2; exit 1; }
            KSU_REF=$TAG
            KSU_URL="https://github.com/$REPO_URL2/releases/tag/$TAG"
          elif [[ "${{ inputs.kernelsu_branch }}" == "Dev(开发)" || "${{ inputs.kernelsu_variant }}" == "MKSU" || "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            COMMIT_HASH=$(git ls-remote $REPO_URL refs/heads/$KSU_BRANCH | awk '{ print $1 }')
            [[ -z "$COMMIT_HASH" ]] && { echo "Error: Could not fetch latest commit" >&2; exit 1; }
            KSU_REF=$COMMIT_HASH
            KSU_URL="https://github.com/$REPO_URL2/commit/$COMMIT_HASH"
          fi

          echo "KSU_REF=$KSU_REF" >> $GITHUB_ENV
          echo "KSU_URL=$KSU_URL" >> $GITHUB_ENV

      - name: 获取 SUSFS 提交信息 (动态)
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"
          
          # Define job-to-branch mapping
          declare -A BRANCH_MAP=(
            ["build-kernel-a12-5-10"]="gki-android12-5.10"
            ["build-kernel-a13-5-10"]="gki-android13-5.10"
            ["build-kernel-a13-5-15"]="gki-android13-5.15"
            ["build-kernel-a14-5-15"]="gki-android14-5.15"
            ["build-kernel-a14-6-1"]="gki-android14-6.1"
            ["build-kernel-a15-6-6"]="gki-android15-6.6"
          )
          
          COMMIT_INFO=""
          for job_id in "${!BRANCH_MAP[@]}"; do
            # Only process if job is in needs list
            if [[ "${{ contains(needs.*.result, job_id) }}" == "true" ]]; then
              branch_name="${BRANCH_MAP[$job_id]}"
              COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
              if [[ -n "$COMMIT_HASH" ]]; then
                COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
                COMMIT_INFO+="  - $branch_name: [$COMMIT_HASH]($COMMIT_URL)"$'\n'
              fi
            fi
          done
          
          echo "COMMIT_INFO<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_INFO" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 添加管理器信息到RELEASE_NOTES
        run: |
          case "${{ inputs.kernelsu_variant }}" in
            "Official")
              MANAGER_INFO="Official 管理器:\n-> https://github.com/tiann/KernelSU"
              ;;
            "Next")
              MANAGER_INFO="Next 管理器:\n-> https://github.com/KernelSU-Next/KernelSU-Next"
              ;;
            "MKSU")
              MANAGER_INFO="MKSU 管理器:\n-> https://github.com/5ec1cff/KernelSU"
              ;;
            "SukiSU")
              MANAGER_INFO="SukiSU 管理器:\n-> https://github.com/ShirkNeko/SukiSU-Ultra"
              ;;
          esac
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo -e "\n$MANAGER_INFO" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 添加提交信息到RELEASE_NOTES
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo -e "\nLTO: thin\n" >> $GITHUB_ENV
          echo "<details>" >> $GITHUB_ENV
          echo -e "\n<summary>提交信息</summary>\n" >> $GITHUB_ENV
          echo "提交的哈希值与链接:" >> $GITHUB_ENV
          echo "- **KernelSU为${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}**: [$KSU_REF]($KSU_URL)" >> $GITHUB_ENV
          echo "- **SUSFS4KSU**:" >> $GITHUB_ENV
          echo "${{ env.COMMIT_INFO }}" >> $GITHUB_ENV
          echo -e "\n</details>" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 生成和创建新标签
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name' || true)
          [[ -z "$LATEST_TAG" ]] && LATEST_TAG="v1.0.0-r0"
          
          if [[ $LATEST_TAG =~ (.*-r)([0-9]+)$ ]]; then
            NEW_SUFFIX=$((${BASH_REMATCH[2]} + 1))
            NEW_TAG="${BASH_REMATCH[1]}$NEW_SUFFIX"
          else
            NEW_TAG="${LATEST_TAG}-r1"
          fi
          
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: 设定 KSU 环境变量
        run: |
          case "${{ inputs.kernelsu_variant }}" in
            "Next")
              git clone --depth=1 https://github.com/KernelSU-Next/KernelSU-Next.git
              cd KernelSU-Next
              KSU_VERSION=$((10000 + $(git rev-list --count HEAD) + 200))
              echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
              echo "RELEASE_NAME=\"GKI内核: ${{ inputs.kernelsu_variant }}($KSU_VERSION) & SUSFS v1.5.7\"" >> $GITHUB_ENV
              ;;
            "SukiSU")
              git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU-Ultra.git
              cd SukiSU-Ultra
              KSU_VERSION=$((10000 + $(git rev-list --count HEAD) + 606))
              echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
              echo "RELEASE_NAME=\"GKI内核: ${{ inputs.kernelsu_variant }}($KSU_VERSION) & SUSFS v1.5.7\"" >> $GITHUB_ENV
              ;;
            *)
              echo "RELEASE_NAME=\"GKI内核: ${{ inputs.kernelsu_variant }} & SUSFS v1.5.7\"" >> $GITHUB_ENV
              ;;
          esac

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: true
          release_name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_NOTES }}

      - name: 上传发布资产
        run: |
          # Upload all artifacts
          find ./downloaded-artifacts -type f -exec gh release upload ${{ env.NEW_TAG }} {} +

      - name: 显示上传文件
        run: find ./downloaded-artifacts -type f | xargs -I{} echo "Uploaded: {}"

     # - name: send telegram message on push
     #   env:
     #     TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
     #     TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
     #     TELEGRAM_MESSAGE_THREAD_ID: ${{ secrets.TELEGRAM_MESSAGE_THREAD_ID }}
     #   run: |
     #       curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
     #       -d "chat_id=$TELEGRAM_CHAT_ID" \
     #       -d "message_thread_id=$TELEGRAM_MESSAGE_THREAD_ID" \
     #       -d "text=Latest release: 
     #       https://github.com/guruji-byte/GKI_KernelSU_SUSFS/releases/tag/${{ env.NEW_TAG }}
     #       ${{ env.RELEASE_NOTES }}"
