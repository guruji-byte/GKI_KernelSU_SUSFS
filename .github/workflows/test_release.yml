name: Test Release

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: true
      kernelsu_variant:
        description: 'Select KernelSU'
        required: true
        type: choice
        options:
          - Official
          - Next
          - MKSU
          - SukiSU
        default: SukiSU
      kernelsu_branch:
        description: 'Select KSU branch'
        required: true
        type: choice
        options:
          - Stable(标准)
          - Dev(开发)
          - Other(其他/指定)
        default: Dev(开发)
      version:
        description: 'Custom version name (characters after 5.10.198 / leave blank to use default version number)'
        required: false
        type: string
      use_zram:
        description: 'Whether to enable more ZRAM algorithms?'
        required: true
        type: boolean
        default: true
      use_kpm:
        description: 'Whether to enable KPM feature?'
        required: true
        type: boolean
        default: true
      get_manager:
        description: 'Whether to get the latest KSU manager at the same time?'
        required: true
        type: boolean
        default: false
      build_kernels:
        description: 'Comma-separated list of kernels to build (e.g., a12-5-10,a13-5-10). Available options: a12-5-10, a13-5-10, a13-5-15, a14-5-15, a14-6-1, a15-6-6'
        required: false
        type: string

jobs:
  get_manager:
    if: inputs.get_manager
    uses: ./.github/workflows/get-manager.yml
    secrets: inherit
    with:
      kernelsu_variant: inputs.kernelsu_variant

  build-kernel-a12-5-10:
    if: contains(',' + inputs.build_kernels + ',', ',a12-5-10,')
    uses: ./.github/workflows/kernel-a12-5.10.yml
    secrets: inherit
    with:
      make_release: inputs.make_release
      kernelsu_variant: inputs.kernelsu_variant
      kernelsu_branch: inputs.kernelsu_branch
      version: inputs.version
      use_zram: inputs.use_zram
      use_kpm: inputs.use_kpm

  build-kernel-a13-5-10:
    if: contains(',' + inputs.build_kernels + ',', ',a13-5-10,')
    uses: ./.github/workflows/kernel-a13-5.10.yml
    secrets: inherit
    with:
      make_release: inputs.make_release
      kernelsu_variant: inputs.kernelsu_variant
      kernelsu_branch: inputs.kernelsu_branch
      version: inputs.version
      use_zram: inputs.use_zram
      use_kpm: inputs.use_kpm

  build-kernel-a13-5-15:
    if: contains(',' + inputs.build_kernels + ',', ',a13-5-15,')
    uses: ./.github/workflows/kernel-a13-5.15.yml
    secrets: inherit
    with:
      make_release: inputs.make_release
      kernelsu_variant: inputs.kernelsu_variant
      kernelsu_branch: inputs.kernelsu_branch
      version: inputs.version
      use_zram: inputs.use_zram
      use_kpm: inputs.use_kpm

  build-kernel-a14-5-15:
    if: contains(',' + inputs.build_kernels + ',', ',a14-5-15,')
    uses: ./.github/workflows/kernel-a14-5.15.yml
    secrets: inherit
    with:
      make_release: inputs.make_release
      kernelsu_variant: inputs.kernelsu_variant
      kernelsu_branch: inputs.kernelsu_branch
      version: inputs.version
      use_zram: inputs.use_zram
      use_kpm: inputs.use_kpm

  build-kernel-a14-6-1:
    if: contains(',' + inputs.build_kernels + ',', ',a14-6-1,')
    uses: ./.github/workflows/kernel-a14-6.1.yml
    secrets: inherit
    with:
      make_release: inputs.make_release
      kernelsu_variant: inputs.kernelsu_variant
      kernelsu_branch: inputs.kernelsu_branch
      version: inputs.version
      use_zram: inputs.use_zram
      use_kpm: inputs.use_kpm

  build-kernel-a15-6-6:
    if: contains(',' + inputs.build_kernels + ',', ',a15-6-6,')
    uses: ./.github/workflows/kernel-a15-6.6.yml
    secrets: inherit
    with:
      make_release: inputs.make_release
      kernelsu_variant: inputs.kernelsu_variant
      kernelsu_branch: inputs.kernelsu_branch
      version: inputs.version
      use_zram: inputs.use_zram
      use_kpm: inputs.use_kpm

  trigger-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    needs:
      - get_manager
      - build-kernel-a12-5-10
      - build-kernel-a13-5-10
      - build-kernel-a13-5-15
      - build-kernel-a14-5-15
      - build-kernel-a14-6-1
      - build-kernel-a15-6-6
    if: inputs.make_release
    env:
      REPO_OWNER: guruji-byte
      REPO_NAME: GKI_KernelSU_SUSFS
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "GKI kernel: ${{ inputs.kernelsu_variant == 'Next' && 'KernelSU-' || '' }} ${{ inputs.kernelsu_variant }}"
      RELEASE_NOTES: |
        This release includes **${{ inputs.kernelsu_variant == 'Next' && 'KernelSU' || '' }}${{ inputs.kernelsu_variant }}, please note the KSU version here** , SUSFS v1.5.7 , LZ4KD

        Features:
        -> ${{ inputs.kernelsu_variant == 'Next' && 'KernelSU-' || '' }}${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}
        -> SUSFS ඞ v1.5.7
        -> Manual Syscall Hooks for better hiding effect
        -> Magic Mount support
        -> Simple hiding of LineageOS detection
        -> Futile hiding of jit-zygote-cache detection
        -> Wireguard support
        -> BBR support
        ${{ inputs.use_kpm && '-> KPM support' || '' }}
        -> **LZ4KD&ONEPLUS_LZ4K**  ${{ inputs.use_zram && 'supported' || 'not supported' }}
        
        <details>
        
        <summary>Notes:</summary>
        - -> In SUS SU mode 2, it will show as disabled or incompatible because (when compiling the kernel) non-kprobe hooks are used, and (non-kprobe hooks) are no longer needed!
        - -> In the latest version of susfs, using Kernel Flasher to flash AK3 zip will brick the device, try https://github.com/libxzr/HorizonKernelFlasher!

        </details>

        Module: 
        -> https://github.com/sidex15/ksu_module_susfs
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine branch for KernelSU-${{ inputs.kernelsu_variant }}
        if: inputs.kernelsu_branch == 'Dev(开发)' || inputs.kernelsu_variant == 'MKSU' || inputs.kernelsu_variant == 'SukiSU'
        run: |
          if [[ "${{ inputs.kernelsu_variant }}" == "Official" || "${{ inputs.kernelsu_variant }}" == "MKSU" ]]; then
            BRANCH="main"
          elif [[ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            BRANCH="main"
          elif [[ "${{ inputs.kernelsu_variant }}" == "Next" ]]; then
            BRANCH="next"
          else
            echo "Error: Custom branch not provided for 'Other(其他/指定)'" >&2
            exit 1
          fi
          echo "KSU_BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Get commit hash or tag and generate URL
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            REPO_URL="https://github.com/tiann/KernelSU.git"
            REPO_URL2="tiann/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            REPO_URL="https://github.com/KernelSU-Next/KernelSU-Next.git"
            REPO_URL2="KernelSU-Next/KernelSU-Next"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            REPO_URL="https://github.com/5ec1cff/KernelSU.git"
            REPO_URL2="5ec1cff/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            REPO_URL="https://github.com/ShirkNeko/KernelSU.git"
            REPO_URL2="ShirkNeko/KernelSU"
          else
            echo "Unknown variant"
            exit 1
          fi
          
          if [[ "${{ inputs.kernelsu_branch }}" == "Stable(标准)" && "${{ inputs.kernelsu_variant }}" != "MKSU" ]]; then
            TAG=$(git ls-remote --tags --sort=-v:refname $REPO_URL | grep -o 'refs/tags/.*' | cut -d'/' -f3 | head -n1)
            [[ -z "$TAG" ]] && { echo "Error: Could not fetch latest tag" >&2; exit 1; }
            KSU_REF=$TAG
            KSU_URL="https://github.com/$REPO_URL2/releases/tag/$TAG"
          elif [[ "${{ inputs.kernelsu_branch }}" == "Dev(开发)" || "${{ inputs.kernelsu_variant }}" == "MKSU" || "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            COMMIT_HASH=$(git ls-remote $REPO_URL refs/heads/$KSU_BRANCH | awk '{ print $1 }')
            [[ -z "$COMMIT_HASH" ]] && { echo "Error: Could not fetch latest commit" >&2; exit 1; }
            KSU_REF=$COMMIT_HASH
            KSU_URL="https://github.com/$REPO_URL2/commit/$COMMIT_HASH"
          fi

          echo "KSU_REF=$KSU_REF" >> $GITHUB_ENV
          echo "KSU_URL=$KSU_URL" >> $GITHUB_ENV

      - name: Get SUSFS commit information (dynamic)
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"
          
          COMMIT_INFO=""
          if [[ "${{ needs.build-kernel-a12-5-10.result }}" == "success" ]]; then
            branch_name="gki-android12-5.10"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              COMMIT_INFO+="  - $branch_name: [$COMMIT_HASH]($COMMIT_URL)"$'\n'
            fi
          fi
          if [[ "${{ needs.build-kernel-a13-5-10.result }}" == "success" ]]; then
            branch_name="gki-android13-5.10"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              COMMIT_INFO+="  - $branch_name: [$COMMIT_HASH]($COMMIT_URL)"$'\n'
            fi
          fi
          if [[ "${{ needs.build-kernel-a13-5-15.result }}" == "success" ]]; then
            branch_name="gki-android13-5.15"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              COMMIT_INFO+="  - $branch_name: [$COMMIT_HASH]($COMMIT_URL)"$'\n'
            fi
          fi
          if [[ "${{ needs.build-kernel-a14-5-15.result }}" == "success" ]]; then
            branch_name="gki-android14-5.15"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              COMMIT_INFO+="  - $branch_name: [$COMMIT_HASH]($COMMIT_URL)"$'\n'
            fi
          fi
          if [[ "${{ needs.build-kernel-a14-6-1.result }}" == "success" ]]; then
            branch_name="gki-android14-6.1"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              COMMIT_INFO+="  - $branch_name: [$COMMIT_HASH]($COMMIT_URL)"$'\n'
            fi
          fi
          if [[ "${{ needs.build-kernel-a15-6-6.result }}" == "success" ]]; then
            branch_name="gki-android15-6.6"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              COMMIT_INFO+="  - $branch_name: [$COMMIT_HASH]($COMMIT_URL)"$'\n'
            fi
          fi
          
          echo "COMMIT_INFO<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_INFO" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Add manager information to RELEASE_NOTES
        run: |
          case "${{ inputs.kernelsu_variant }}" in
            "Official")
              MANAGER_INFO="Official manager:\n-> https://github.com/tiann/KernelSU"
              ;;
            "Next")
              MANAGER_INFO="Next manager:\n-> https://github.com/KernelSU-Next/KernelSU-Next"
              ;;
            "MKSU")
              MANAGER_INFO="MKSU manager:\n-> https://github.com/5ec1cff/KernelSU"
              ;;
            "SukiSU")
              MANAGER_INFO="SukiSU manager:\n-> https://github.com/ShirkNeko/SukiSU-Ultra"
              ;;
          esac
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo -e "\n$MANAGER_INFO" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Add commit information to RELEASE_NOTES
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo -e "\nLTO: thin\n" >> $GITHUB_ENV
          echo "<details>" >> $GITHUB_ENV
          echo -e "\n<summary>Commit information</summary>\n" >> $GITHUB_ENV
          echo "Commit hash and link:" >> $GITHUB_ENV
          echo "- **KernelSU is ${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}**: [$KSU_REF]($KSU_URL)" >> $GITHUB_ENV
          echo "- **SUSFS4KSU**:" >> $GITHUB_ENV
          echo "${{ env.COMMIT_INFO }}" >> $GITHUB_ENV
          echo -e "\n</details>" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate and create new tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name' || true)
          [[ -z "$LATEST_TAG" ]] && LATEST_TAG="v1.0.0-r0"
          
          if [[ $LATEST_TAG =~ (.*-r)([0-9]+)$ ]]; then
            NEW_SUFFIX=$((${BASH_REMATCH[2]} + 1))
            NEW_TAG="${BASH_REMATCH[1]}$NEW_SUFFIX"
          else
            NEW_TAG="${LATEST_TAG}-r1"
          fi
          
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Set KSU environment variables
        run: |
          case "${{ inputs.kernelsu_variant }}" in
            "Next")
              git clone --depth=1 https://github.com/KernelSU-Next/KernelSU-Next.git
              cd KernelSU-Next
              KSU_VERSION=$((10000 + $(git rev-list --count HEAD) + 200))
              echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
              echo "RELEASE_NAME=\"GKI kernel: ${{ inputs.kernelsu_variant }}($KSU_VERSION) & SUSFS v1.5.7\"" >> $GITHUB_ENV
              ;;
            "SukiSU")
              git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU-Ultra.git
              cd SukiSU-Ultra
              KSU_VERSION=$((10000 + $(git rev-list --count HEAD) + 606))
              echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
              echo "RELEASE_NAME=\"GKI kernel: ${{ inputs.kernelsu_variant }}($KSU_VERSION) & SUSFS v1.5.7\"" >> $GITHUB_ENV
              ;;
            *)
              echo "RELEASE_NAME=\"GKI kernel: ${{ inputs.kernelsu_variant }} & SUSFS v1.5.7\"" >> $GITHUB_ENV
              ;;
          esac

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: true
          release_name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_NOTES }}

      - name: Upload release assets
        run: |
          # Upload manager files
          if ls ./downloaded-artifacts/*Manager*/* 1> /dev/null 2>&1; then
            echo "Uploading manager files..."
            gh release upload ${{ env.NEW_TAG }} ./downloaded-artifacts/*Manager*/*
          fi
          
          # Upload kernel files
          for dir in ./downloaded-artifacts/*_kernel-*; do
            if [ -d "$dir" ]; then
              echo "Uploading files in $dir..."
              gh release upload ${{ env.NEW_TAG }} $dir/*
            fi
          done

      - name: Show uploaded files
        run: |
          echo "Uploaded files:"
          find ./downloaded-artifacts -type f
