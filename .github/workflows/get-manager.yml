name: GetManager
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: read   # Allows triggering actions

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      kernelsu_variant:
        required: true
        type: string

jobs:
  get_ksu_manager:
    runs-on: ubuntu-latest
    env:
      # Environment variables for CCACHE, which are good to keep.
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      # Use the default GITHUB_TOKEN for API access
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: 安装依赖 (Install Dependencies)
        run: sudo apt update && sudo apt install -y git curl jq

      - name: 设定 KSU 环境变量 (Set KSU Environment Variables)
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "This is the Next variant"
            # Clone and calculate version for Next
            git clone --depth 1 https://github.com/KernelSU-Next/KernelSU-Next.git /tmp/kernelsu_repo
            cd /tmp/kernelsu_repo
            KSU_GIT_VERSION=$(git rev-list --count HEAD)
            KSU_VERSION=$((10000 + KSU_GIT_VERSION + 200))
            echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "This is the SukiSU variant"
            # Clone and calculate version for SukiSU
            git clone --depth 1 https://github.com/SukiSU-Ultra/SukiSU-Ultra.git /tmp/kernelsu_repo
            cd /tmp/kernelsu_repo
            KSU_GIT_VERSION=$(git rev-list --count HEAD)
            KSU_VERSION=$((10000 + KSU_GIT_VERSION + 700))
            echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
          else
            echo "Error: Unknown variant ${{ inputs.kernelsu_variant }}"
            exit 1
          fi
          
          echo "Calculated KSU_VERSION: $KSU_VERSION"

      - name: 下载 KernelSU Manager (Download KernelSU Manager)
        run: |
          VARIANT="${{ inputs.kernelsu_variant }}"
          TOKEN="${{ secrets.GITHUB_TOKEN }}" # Use a local variable for clarity

          # 1. Set Repository Variables
          if [ "$VARIANT" == "Next" ]; then
            echo "KernelSU Next..."
            REPO="KernelSU-Next/KernelSU-Next"
            FILENAME="build-manager-ci.yml"
          elif [ "$VARIANT" == "SukiSU" ]; then
            echo "SukiSU..."
            REPO="SukiSU-Ultra/SukiSU-Ultra"
            FILENAME="build-manager.yml"
          else
            echo "Error: Unknown kernelsu_variant input: $VARIANT" >&2
            exit 1
          fi

          # 2. Get the latest successful build ID
          echo "Fetching latest successful BUILD_ID for $REPO workflow $FILENAME..."
          BUILD_ID=$(curl -s -H "Authorization: token $TOKEN" \
          "https://api.github.com/repos/$REPO/actions/workflows/$FILENAME/runs?status=success&per_page=1" | \
          jq -r '.workflow_runs[0].id')
          
          echo "Retrieved BUILD_ID: $BUILD_ID"
          
          # CRITICAL CHECK: Ensure BUILD_ID is valid
          if [ -z "$BUILD_ID" ] || [ "$BUILD_ID" == "null" ]; then
              echo "Error: Could not retrieve a successful BUILD_ID." >&2
              echo "Check that the upstream workflow has run successfully on $REPO." >&2
              exit 1
          fi

          # 3. Get the Artifacts for that build
          echo "Fetching artifacts list for run ID $BUILD_ID..."
          ARTIFACTS=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/actions/runs/$BUILD_ID/artifacts")
          
          # 4. Get Manager file download URL
          DOWNLOAD_URL=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name | contains("Manager")) | .archive_download_url')
          
          echo "Retrieved DOWNLOAD_URL: $DOWNLOAD_URL"
          
          # CRITICAL CHECK: Ensure DOWNLOAD_URL is valid
          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" == "null" ]; then
              echo "Error: Could not find the Manager artifact download URL." >&2
              echo "Artifacts response start (Debug): $(echo "$ARTIFACTS" | head -c 200)" >&2
              exit 1
          fi
          
          # 5. Download Manager file (Original failure point)
          OUTPUT_NAME="$VARIANT-管理器(${{ env.KSU_VERSION }}).zip"
          echo "Starting download of Manager file to: $OUTPUT_NAME"
          
          curl -L -H "Authorization: token $TOKEN" -o "$OUTPUT_NAME" "$DOWNLOAD_URL"
          
          # Check if the final download curl command failed
          if [ $? -ne 0 ]; then
              echo "Error: Final curl download failed for URL $DOWNLOAD_URL" >&2
              exit 1
          fi
          
          echo "Manager 文件已下载为：$OUTPUT_NAME"
          unzip "$OUTPUT_NAME"

      - name: 上传编译资产 (Upload Build Artifacts)
        uses: actions/upload-artifact@v4
        with:
          # Use the calculated KSU_VERSION from the environment
          name: ${{ inputs.kernelsu_variant }}-Manager(${{ env.KSU_VERSION }})
          path: |
            *.apk
